import asyncio
import datetime
from aiogram import Dispatcher
import config
import aioschedule
import db_requests
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot_init import bot
from modules.client import Client
import models
from aiogram import F, Router
from middlewares.outer import CheckForUserBan, CheckForUserBanCallback, BotInService, BotInServiceCallback
import handlers.start, handlers.admin_menu, handlers.keys_and_configs, handlers.menu, handlers.help
import handlers.payment, handlers.profile, handlers.cancel_from, handlers.commands, handlers.health_status, handlers.web
import handlers.connect


router = Router()


async def ban():
    clients_for_ban = await db_requests.get_clients_for_ban()
    builder = InlineKeyboardBuilder()
    builder.button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data='payment_by_card')
    builder.button(text='‚è≥ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂', callback_data='postpone_payment')
    builder.adjust(1)
    admin_message_text = f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª {len(clients_for_ban)} –∫–ª–∏–µ–Ω—Ç–æ–≤:\n'
    for client_ in clients_for_ban:
        client = Client(client_.user_telegram_id)
        admin_message_text += f'/view_user_{client.user_telegram_id} / {client.user_name}\n'
        await client.block()
        message_text = ('–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ —è –≤—ã–Ω—É–∂–¥–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã üòû\n\n'
                    f'–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ–ø–ª–∞—Ç–∏–≤ {client.tariff} —Ä—É–±–ª–µ–π –∏–ª–∏ –≤–∑—è–≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂.')
        try:
            await bot.send_message(client.user_telegram_id, message_text, reply_markup=builder.as_markup())
        except:
            pass
    
    if len(clients_for_ban) > 0:
        await bot.send_message(376131047, admin_message_text)


async def remind():
    clients_for_remind = await db_requests.get_clients_for_remind()
    builder = InlineKeyboardBuilder()
    builder.button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', callback_data='payment_by_card')
    builder.button(text='‚è≥ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂', callback_data='postpone_payment')
    builder.adjust(1)
    current_time = datetime.datetime.utcnow()

    for client in clients_for_remind:
        client: models.Access
        message_text = (f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø <b>–¥–æ {datetime.datetime.strftime(datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=int(client.timezone)), "%H:%M %d.%m.%Y")} (UTC+{client.timezone})</b> —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.\n\n'
                    f'–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è –≤–∑—è–≤ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂.')
        
        current_client_time = current_time + datetime.timedelta(hours=int(client.timezone))
        
        if 8 < current_client_time.hour < 22:
            try:
                await bot.send_message(client.user_telegram_id, message_text, reply_markup=builder.as_markup())
            except:
                pass
        else:
            try:
                await bot.send_message(client.user_telegram_id, message_text, disable_notification=True, reply_markup=builder.as_markup())
            except:
                pass


async def reset_chat_with_admin_status():
    clients = await db_requests.get_clients_with_active_chat()
    for client in clients:
        await db_requests.set_status_chat_with_admin(client.user_telegram_id, False)


async def reminder():
    if not config.DEBUG:
        aioschedule.every(1).minutes.do(ban)
        aioschedule.every(1).minutes.do(remind)
        aioschedule.every().day.at("00:00").do(reset_chat_with_admin_status)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup():
    asyncio.create_task(reminder())


async def main():
    router = Dispatcher()
    router.include_routers(handlers.start.router, handlers.admin_menu.router, handlers.cancel_from.router, handlers.connect.router,
                           handlers.health_status.router, handlers.help.router, handlers.keys_and_configs.router, handlers.menu.router, 
                           handlers.payment.router, handlers.profile.router, handlers.commands.router, handlers.chart.router, handlers.web.router) 
    router.message.outer_middleware(CheckForUserBan())
    #router.message.outer_middleware(BotInService())
    router.callback_query.outer_middleware(CheckForUserBanCallback())
    #router.callback_query.outer_middleware(BotInServiceCallback())
    await on_startup()
    await router.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
    