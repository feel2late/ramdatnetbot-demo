import datetime
import random
import uuid
from aiogram import types
from aiogram.filters import Text
import db_requests
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot_init import bot
from modules.client import Client
from aiogram import F, Router
from aiogram.filters.chat_member_updated import MEMBER, KICKED
from modules.callbacks_factories import RestoreShutdownDate
from yookassa import Payment
from gifs_id import gifs_id


router = Router()


@router.message(F.photo)
async def confirmation_photo_(message: types.Message):
    builder = InlineKeyboardBuilder()
    print(message.photo[-1].file_id)
    chat_info = await bot.get_chat(message.from_user.id)
    if not chat_info.has_private_forwards:
        builder.button(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', url=f'tg://user?id={message.from_user.id}')
    #await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.full_name}) –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ', reply_markup=builder.as_markup())
    await bot.forward_message(376131047, message.chat.id, message.message_id)
    builder = InlineKeyboardBuilder()
    builder.button(text='üÜò –ù–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data='help_screenshot')
    builder.button(text='‚úÖ –î–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø', callback_data='confirm_payment')
    builder.adjust(1)
    await message.answer("–≠—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã?", reply_markup=builder.as_markup())
    

@router.callback_query(Text('confirm_payment'))
async def confirm_payment(callback: types.CallbackQuery):
    if not db_requests.is_registered(callback.from_user.id):
        await callback.answer('–Ø –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?')
    else:
        client = Client(callback.from_user.id)
        await client.unblock()
        new_shutdown_date = await db_requests.add_days(client.user_telegram_id)
        
        payment_id = await db_requests.add_payment(client.user_telegram_id, client.tariff, 'screenshot')
        
        await callback.message.edit_text(('üòå –°–ø–∞—Å–∏–±–æ, –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n'
                              '‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n'
                              f'–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: –¥–æ {datetime.datetime.strftime(datetime.datetime.strptime(new_shutdown_date, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=int(client.timezone)), "%H:%M %d.%m.%Y")} (UTC+{client.timezone})\n\n'))
        await bot.send_animation(callback.from_user.id, animation=gifs_id[random.randint(0, len(gifs_id) - 1)])
        builder = InlineKeyboardBuilder()
        builder.button(text='–û—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', callback_data=RestoreShutdownDate(user_telegram_id=client.user_telegram_id, date=int(datetime.datetime.timestamp(datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S"))), payment_id=payment_id))
        await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {callback.from_user.id} ({callback.from_user.username} / {callback.from_user.full_name}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º', reply_markup=builder.as_markup())
        
        inviter = await db_requests.get_inviter_id(client.user_telegram_id)
        if inviter:
            inviter_object = Client(inviter)
            if inviter_object.blocked:
                await inviter_object.unblock()
            if client.payment_recieved:
                await db_requests.add_days(inviter, days=3, bonus=True)
                try:
                    await bot.send_message(inviter, f'–í–∞—à –¥—Ä—É–≥ {client.user_name} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø, –∑–∞ —ç—Ç–æ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è! üòé')
                except:
                    pass
            else:
                await db_requests.add_days(inviter, bonus=True)
                try:
                    await bot.send_message(inviter, f'–í–∞—à –¥—Ä—É–≥ {client.user_name} –≤–ø–µ—Ä–≤—ã–µ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø, –∑–∞ —ç—Ç–æ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π –º–µ—Å—è—Ü! üòé')
                except:
                    pass


@router.message(F.document)
async def confirmation_document(message: types.Message):
    builder = InlineKeyboardBuilder()
    chat_info = await bot.get_chat(message.from_user.id)
    if not chat_info.has_private_forwards:
        builder.button(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', url=f'tg://user?id={message.from_user.id}')

    if not db_requests.is_registered(message.from_user.id):
        await message.answer('–û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω–æ, —è –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?')
        await bot.send_message(376131047, f'<b>–ù–ï–ó–ê–†–ï–ì–ò–°–¢–ò–†–û–í–ê–ù–ù–´–ô</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.first_name}) –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ', reply_markup=builder.as_markup())
        await bot.send_photo(chat_id=376131047, photo=message.photo[-1].file_id)
    else:
        client = Client(message.from_user.id)
        new_shutdown_date = await db_requests.add_days(client.user_telegram_id)
        await client.unblock()
        payment_id = await db_requests.add_payment(client.user_telegram_id, client.tariff, 'document')   
        
        await message.answer(('üòå –°–ø–∞—Å–∏–±–æ, –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n'
                              '‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n'
                              f'–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: –¥–æ {datetime.datetime.strftime(datetime.datetime.strptime(new_shutdown_date, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=int(client.timezone)), "%H:%M %d.%m.%Y")} (UTC+{client.timezone})\n\n'))
        await bot.send_animation(message.from_user.id, animation=gifs_id[random.randint(0, len(gifs_id) - 1)])
        await bot.forward_message(376131047, message.chat.id, message.message_id)
        
        builder = InlineKeyboardBuilder()
        builder.button(text='–û—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', callback_data=RestoreShutdownDate(user_telegram_id=client.user_telegram_id, date=int(datetime.datetime.timestamp(datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S"))), payment_id=payment_id))
        await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.full_name}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–º', reply_markup=builder.as_markup())
        
        inviter = await db_requests.get_inviter_id(client.user_telegram_id)
        if inviter:
            inviter_object = Client(inviter)
            if inviter_object.blocked:
                await inviter_object.unblock()
            if client.payment_recieved:
                await db_requests.add_days(inviter, days=3, bonus=True)
                try:
                    await bot.send_message(inviter, f'–í–∞—à –¥—Ä—É–≥ {client.user_name} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø, –∑–∞ —ç—Ç–æ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è! üòé')
                except:
                    pass
            else:
                await db_requests.add_days(inviter, bonus=True)
                try:
                    await bot.send_message(inviter, f'–í–∞—à –¥—Ä—É–≥ {client.user_name} –≤–ø–µ—Ä–≤—ã–µ –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø, –∑–∞ —ç—Ç–æ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π –º–µ—Å—è—Ü! üòé')
                except:
                    pass
        

@router.callback_query(F.data.startswith("payment_by_card_"))
async def pay(callback: types.CallbackQuery, from_payment_by_transfer=False):
    client = await db_requests.get_client(callback.from_user.id)
    month_to_discount = {'1': 0, '3': 10, '6': 20}
    number_of_month = callback.data[16:]
    decrease_amount = (month_to_discount[number_of_month] / 100) * (client.tariff * int(number_of_month))
    amount_value = client.tariff * int(number_of_month) - decrease_amount
    
    if from_payment_by_transfer:
        message_text = ('üëâüèª –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π!\n'
                        '‚òùüèª –ù–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –Ω–∏–∫–∞–∫–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞! ü§©\n\n'
                        '–ù–æ –º–æ–∂–Ω–æ –∏ –ø–æ —Å—Ç–∞—Ä–∏–Ω–∫–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º: <code>+79964081388</code> (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å) (Sber, Tinkoff)')
    else:
        message_text = ('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø–ª–∞—Ç—ë–∂–Ω—ã–π —à–ª—é–∑.\n\n'
                        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</b>')

    payment = Payment.create({
        "amount": {
            "value": f"{int(amount_value)}.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/RAMDATNET_BOT"
        },
        "capture": True,
        "description": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {number_of_month} –º–µ—Å—è—Ü(–∞).",
        "metadata": {"user_telegram_id": client.user_telegram_id, "number_of_month": number_of_month}
        }, uuid.uuid4())
    
    builder = InlineKeyboardBuilder()
    if from_payment_by_transfer:
        builder.button(text='–û–ø–ª–∞—Ç–∞ –°–ë–ü –∏–ª–∏ –∫–∞—Ä—Ç–æ–π', url=payment.confirmation.confirmation_url)
    else:
        builder.button(text=f'–û–ø–ª–∞—Ç–∏—Ç—å {int(amount_value)} —Ä.', url=payment.confirmation.confirmation_url)
        
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='payment_by_card')
    builder.adjust(1)
    message_pay = await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    return
    


@router.callback_query(Text('payment_by_transfer'))
async def payment_by_transfer(callback: types.CallbackQuery):
    await pay(callback, True)
    