from aiogram import types
from aiogram.filters.command import Command
import db_requests
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot_init import bot
from modules.client import Client
from aiogram import F, Router
from handlers.menu import menu
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
import datetime
from modules.states import ManualControl, SendMessageToAllUsers
import traceback
import api_requests
import config
import asyncio
from modules.callbacks_factories import RestoreShutdownDate


router = Router()  


@router.callback_query(F.data == 'admin_menu')
async def admin_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='manual_control')
    builder.button(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='active_users')
    builder.button(text='–ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏–µ', callback_data='inviters')
    builder.button(text='–û–ø–ª–∞—Ç—ã', callback_data='payments')
    builder.button(text='–ê–Ω–∞–ª–∏–∑', callback_data='analysis')
    #builder.button(text='–ö–æ–º–∞–Ω–¥—ã', callback_data='admin_commands')
    builder.button(text='–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞', callback_data='health_status')
    builder.button(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='admin_send_message_to_all_users')
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='menu')
    builder.adjust(1)

    active_users = await db_requests.get_active_users()
    payments_sum = 0
    payments_num = 0
    payments = await db_requests.get_payments()
    for payment in payments:
        if int(payment.month) == datetime.datetime.utcnow().month:
            payments_sum += payment.amount
            payments_num += 1

    message_text = (f'ü•∑ –ê–¥–º–∏–Ω –º–µ–Ω—é\n\n'
                    f'üí∞ –î–æ—Ö–æ–¥ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {payments_sum} —Ä. ({payments_num} –ø–ª–∞—Ç–µ–∂–µ–π)\n\n'
                    f'üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n\n')

    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == 'analysis')
async def analysis(callback: types.CallbackQuery, state: FSMContext):
    now = datetime.datetime.utcnow()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü—ã
    current_month_payments = await db_requests.get_payments_for_period(now.replace(day=1, hour=0, minute=0, second=0), now)
    last_month_payments = await db_requests.get_payments_for_period(now.replace(month=now.month - 1, day=1, hour=0, minute=0, second=0), now.replace(month=now.month - 1))
    
    # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –º–µ—Å—è—Ü—ã
    current_month_total_amount = sum(payment.amount for payment in current_month_payments)
    last_month_total_amount = sum(payment.amount for payment in last_month_payments)
    

    message_text = (f'–ê–Ω–∞–ª–∏–∑ —Å—É–º–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–ª–∞—Ç: —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è/—ç—Ç–∞ –Ω–µ–¥–µ–ª—è –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞, —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü/–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü.\n\n'
                    f'<b>–≠—Ç–æ—Ç –º–µ—Å—è—Ü:</b> {len(current_month_payments)} –Ω–∞ —Å—É–º–º—É {current_month_total_amount}\n'
                    f'<b>–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b> {len(last_month_payments)} –Ω–∞ —Å—É–º–º—É {last_month_total_amount}\n'
                    f'<b>–†–∞–∑–Ω–∏—Ü–∞ —Å—É–º–º:</b> {int(((current_month_total_amount - last_month_total_amount) / last_month_total_amount) * 100)}% –∏–ª–∏ {current_month_total_amount - last_month_total_amount} —Ä—É–±.\n'
                    f'<b>–†–∞–∑–Ω–∏—Ü–∞ –∫–æ–ª-–≤–æ:</b> {int(((len(current_month_payments) - len(last_month_payments)) / len(last_month_payments)) * 100)}% –∏–ª–∏ {len(current_month_payments) - len(last_month_payments)} –ø–ª–∞—Ç–µ–∂–µ–π.')
    
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
   

@router.callback_query(F.data == 'payments')
async def payments(callback: types.CallbackQuery, state: FSMContext):
    all_payments = await db_requests.get_last_payments()
    message_text = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–ª–∞—Ç–µ–∂–µ–π:\n\n'
    for i, payment in enumerate(all_payments):
        user = Client(payment.user_telegram_id)
        message_text += (f'{i + 1}) {datetime.datetime.strftime(payment.datetime, "%H:%M %d.%m.%Y")}: '
                         f'{payment.type}: '
                         f'{payment.amount}: '
                         f'{user.user_name}\n')
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='admin_menu')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())

@router.callback_query(F.data == 'manual_control', StateFilter('*'))
async def manual_control(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    await callback.message.edit_reply_markup(answer_markup='')
    if fsmdata.get('user_telegram_id'):
        await state.set_state()
        await user_info(callback.message, state)
        return

    builder = InlineKeyboardBuilder()
    builder.button(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await state.set_state(ManualControl.user_telegram_id)
    await callback.message.edit_text('–ü—Ä–∏—à–ª–∏ user_telegram_id', reply_markup=builder.as_markup())


@router.message(F.text.startswith('/view_user_'))
@router.message(StateFilter(ManualControl.user_telegram_id))
async def user_info(message: types.Message, state: FSMContext):
    fsmdata = await state.get_data()
    
    if message.text.startswith('/view_user_'):
        if not message.from_user.id in config.admins:
            return
        user_telegram_id = message.text[11:]
        await state.update_data(user_telegram_id=user_telegram_id)
    else:
        if fsmdata.get('user_telegram_id'):
            user_telegram_id = fsmdata['user_telegram_id']
        else:
            if message.text.isnumeric():
                user_telegram_id = message.text
                await state.update_data(user_telegram_id=user_telegram_id)
            else:
                await message.answer('user_telegram_id –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
                return
    
    client = Client(user_telegram_id)
    user_payments = await db_requests.get_user_payments(client.user_telegram_id)
    builder = InlineKeyboardBuilder()
    builder.button(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', callback_data='change_shutdown_date')
    builder.button(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ', callback_data='change_client_tariff')
    if client.banned:
        builder.button(text='–†–∞–∑–±–∞–Ω–∏—Ç—å –≤ –±–æ—Ç–µ', callback_data='unban_user_in_bot')
    else:
        builder.button(text='–ó–∞–±–∞–Ω–∏—Ç—å –≤ –±–æ—Ç–µ', callback_data='ban_user_in_bot')
    builder.button(text='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏', callback_data='client_block')    
    builder.button(text='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏', callback_data='client_unblock')
    builder.button(text=f'–ü–ª–∞—Ç–µ–∂–∏ ({len(user_payments)})', callback_data='client_payments')
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')
    builder.adjust(1)
    
    message_text = (f'<b>–í–°–ï –î–ê–¢–´ –£–ö–ê–ó–ê–ù–´ –í UTC+0</b>\n\n'
                    f'<b>Telegram id:</b> {client.user_telegram_id}\n'
                    f'<b>–ò–º—è:</b> {client.user_name}\n'
                    f'<b>–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:</b> {datetime.datetime.utcnow().replace(microsecond=0) + datetime.timedelta(hours=int(client.timezone))} (UTC+{client.timezone})\n'
                    f'<b>–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S")}\n'
                    f'<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω:</b> { f"{client.payment_recieved}" if client.payment_recieved else "–Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–æ"}\n'
                    f'<b>–ü–ª–∞—Ç–µ–∂–µ–π:</b> {len(user_payments)}\n'
                    f'<b>–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {client.connection_date}\n'
                    f'<b>–ö–ª—é—á–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b> {"–î–∞" if client.blocked else "–ù–µ—Ç"}\n'
                    f'<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {"–î–∞" if client.reminder else "–ù–µ—Ç"}\n'
                    f'<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> UTC+{client.timezone}\n'
                    f'<b>–¢–∞—Ä–∏—Ñ:</b> {client.tariff} —Ä.\n'
                    f'<b>–û–±–µ—â–∞–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂:</b> {"–ê–∫—Ç–∏–≤–µ–Ω" if client.postpone_payment else "–ù–µ—Ç"}\n'
                    f'<b>–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º:</b> {"–î–∞" if client.chat_with_admin else "–ù–µ—Ç"}\n'
                    f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö:</b> {client.number_of_invitees}\n'
                    f'<b>–ó–∞–±–∞–Ω–µ–Ω:</b> {"–î–∞" if client.banned else "–ù–µ—Ç"}\n'
                    f'<b>–î–∞—Ç–∞ –±–∞–Ω–∞:</b> {"–ù–µ—Ç" if not client.banned_at else client.banned_at} {"(UTC+0)" if client.banned_at else ""}\n'
                    f'<b>–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</b> {"–î–∞" if client.blocked_bot else "–ù–µ—Ç"}'
                    )
    await state.set_state()
    admin_msg = await message.answer(message_text, reply_markup=builder.as_markup())
    await state.update_data(admin_msg=admin_msg)
    

@router.callback_query(F.data == 'client_payments')
async def client_payments(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    client = Client(fsmdata.get('user_telegram_id'))
    user_payments = await db_requests.get_user_payments(client.user_telegram_id)
    message_text = '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n'
    
    for payment in user_payments:
        message_text += f'{datetime.datetime.strftime(payment.datetime, "%H:%M %d.%m.%Y")} - {payment.amount} ({payment.type})\n'
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É', callback_data='manual_control')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == 'inviters')
async def inviters(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')
    inviters = await db_requests.get_inviters()
    message_text = '–°–ø–∏—Å–æ–∫ –∏–Ω–≤–∞–π—Ç–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö:\n\n'
    for i, inviter in enumerate(inviters):
        inviter_as_client = Client(inviter)
        message_text += f'{i+1}) {inviter_as_client.user_telegram_id} {inviter_as_client.user_name} - {inviters.get(inviter)}\n'
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == 'change_client_tariff')
async def change_client_tariff(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(answer_markup='')
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É', callback_data='manual_control')
    await state.set_state(ManualControl.new_tariff)

    await callback.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞', reply_markup=builder.as_markup())


@router.message(StateFilter(ManualControl.new_tariff))
async def set_new_tariff(message: types.Message, state: FSMContext):
    fsmdata = await state.get_data()
    client = Client(fsmdata.get('user_telegram_id'))
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É', callback_data='manual_control')
    
    new_tariff = int(message.text)

    await db_requests.set_new_tariff(client.user_telegram_id, new_tariff)

    await message.answer(f'–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client.user_name} / {client.user_telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {new_tariff} —Ä.', reply_markup=builder.as_markup())


@router.callback_query(F.data == 'client_block')
async def client_block(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    client = Client(fsmdata.get('user_telegram_id'))
    await client.block()
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É', callback_data='manual_control')
    
    await callback.message.edit_text(f'–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client.user_name} / {client.user_telegram_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n\n'
                                     '–í–ù–ò–ú–ê–ù–ò–ï! –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π.', reply_markup=builder.as_markup())  


@router.callback_query(F.data == 'client_unblock')
async def client_block(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    client = Client(fsmdata.get('user_telegram_id'))
    await client.unblock()
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É', callback_data='manual_control')

    await callback.message.edit_text(f'–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client.user_name} / {client.user_telegram_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏ –∏ —Å–Ω—è—Ç —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n\n'
                                     '–í–ù–ò–ú–ê–ù–ò–ï! –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π.', reply_markup=builder.as_markup())  
    

@router.message(Command('get_free_keys'))
async def add_key(message: types.Message):
    await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π: {await db_requests.get_free_keys()}")


@router.callback_query(F.data == 'ban_user_in_bot')
async def ban_user_in_bot(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    client = Client(fsmdata.get('user_telegram_id'))
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É', callback_data='manual_control')  

    try:
        user_telegram_id = client.user_telegram_id
        user_name = client.user_name
        ban_user = await db_requests.ban_client(user_telegram_id, user_name)
        if ban_user:
            await callback.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} / {user_telegram_id} –∑–∞–±–∞–Ω–µ–Ω', reply_markup=builder.as_markup())
        else:
            await callback.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} / {user_telegram_id} —É–∂–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω', reply_markup=builder.as_markup())
    except:
        await callback.message.edit_text('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=builder.as_markup())
        await callback.message.reply(traceback.format_exc())


@router.callback_query(F.data == 'unban_user_in_bot')
async def unban_user_in_bot(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    client = Client(fsmdata.get('user_telegram_id'))
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É', callback_data='manual_control')  
    
    try:
        user_telegram_id = client.user_telegram_id
        user_name = client.user_name
        ban_user = await db_requests.unban_client(user_telegram_id)
        if ban_user:
            await callback.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} / {user_telegram_id} —Ä–∞–∑–±–∞–Ω–µ–Ω', reply_markup=builder.as_markup())
        else:
            await callback.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} / {user_telegram_id} —É–∂–µ –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω', reply_markup=builder.as_markup())
    except:
        await callback.message.edit_text('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=builder.as_markup())
        await callback.message.reply(traceback.format_exc())


@router.callback_query(F.data == 'change_shutdown_date')
async def change_shutdown_date(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(answer_markup='')
    await state.set_state(ManualControl.new_shutdown_date)
    builder = InlineKeyboardBuilder()
    builder.button(text='–û—Ç–º–µ–Ω–∞', callback_data='manual_control')
    await callback.message.answer('–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm DD.MM.YYYY (UTC+0)\n\n'
                                  '–ï—Å–ª–∏ –¥–∞—Ç–∞ –±—É–¥–µ—Ç –ú–ï–ù–¨–®–ï —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n'
                                  '–ï—Å–ª–∏ –¥–∞—Ç–∞ –±—É–¥–µ—Ç –ë–û–õ–¨–®–ï —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n', reply_markup=builder.as_markup())
    

@router.message(StateFilter(ManualControl.new_shutdown_date))
async def set_new_shutdown_date(message: types.Message, state: FSMContext):
    fsmdata = await state.get_data()
    client = Client(fsmdata['user_telegram_id'])
    #old_shutdown_date = datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S")
    #current_client_time = datetime.datetime.utcnow() + datetime.timedelta(hours=int(client.timezone))
    current_time = datetime.datetime.utcnow()
    date = message.text
    try:
        datetime.datetime.strptime(date, '%H:%M %d.%m.%Y')
        new_shutdown_date = datetime.datetime.strptime(date, "%H:%M %d.%m.%Y")
    except ValueError:
        print(traceback.format_exc())
        builder = InlineKeyboardBuilder()
        builder.button(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')         
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã', reply_markup=builder.as_markup())
        return
    
    await db_requests.set_new_shutdown_date(client.user_telegram_id, new_shutdown_date)

    if new_shutdown_date < current_time:
        await client.block()
    else:
        await client.unblock()
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É', callback_data='manual_control')  
    await message.answer(f'–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.user_telegram_id} / {client.user_name}\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {new_shutdown_date}', reply_markup=builder.as_markup())
    await state.set_state()
    

@router.callback_query(F.data == 'active_users')
async def active_users(callback: types.CallbackQuery):
    active_users = await db_requests.get_active_users()
    message_text = '–î–∞–Ω–Ω—ã–µ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É –≤ GB\n\n'   
    data_transfered = api_requests.get_data_transferred()
    rdn2_data_transfered = data_transfered.get('rdn2').get('bytesTransferredByUserId')
    rdn4_data_transfered = data_transfered.get('rdn4').get('bytesTransferredByUserId')
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')
    users_without_payments = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º:\n\n'

    for id, user in enumerate(active_users):
        client = Client(user.user_telegram_id)
        rdn2_transfered = int(rdn2_data_transfered.get(str(client.rdn2_id)) / 1073741824) if rdn2_data_transfered.get(str(client.rdn2_id)) else 0
        rdn4_transfered = int(rdn4_data_transfered.get(str(client.rdn4_id)) / 1073741824) if rdn4_data_transfered.get(str(client.rdn4_id)) else 0
        if client.user_telegram_id in config.USERS_WITHOUT_PAYMENT:
            users_without_payments += (f'{"‚õîÔ∏è " if client.blocked_bot else ""}{client.user_telegram_id} | {client.user_name} | {"‚ùóÔ∏è " + str(rdn2_transfered) if rdn2_transfered > 150 else rdn2_transfered} ' 
                                        f'@ {"‚ùóÔ∏è " + str(rdn4_transfered) if rdn4_transfered > 150 else rdn4_transfered} | ' 
                                        f'{datetime.datetime.strftime(datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S"), "%d.%m.%Y")}\n\n')
            continue
        try:
            message_text += (f'{"‚õîÔ∏è " + str(id + 1) if client.blocked_bot else id + 1}) {client.user_telegram_id} | {client.user_name} | {"‚ùóÔ∏è " + str(rdn2_transfered) if rdn2_transfered > 150 else rdn2_transfered} ' 
                            f'@ {"‚ùóÔ∏è " + str(rdn4_transfered) if rdn4_transfered > 150 else rdn4_transfered} | ' 
                            f'{datetime.datetime.strftime(datetime.datetime.strptime(user.shutdown_date, "%Y-%m-%d %H:%M:%S"), "%d.%m.%Y")}\n\n')
        except:
            print(traceback.format_exc())
            print('–ù–µ –Ω–∞–π–¥–µ–Ω: ' + str(user.user_name) + str(user.rdn2_id))
            continue

    MESS_MAX_LENGTH = 4096
    for x in range(0, len(message_text), MESS_MAX_LENGTH):
        mess = message_text[x: x + MESS_MAX_LENGTH]
        await callback.message.answer(mess)
    await callback.message.answer(users_without_payments)

@router.callback_query(F.data == 'all_users')
async def all_users(callback: types.CallbackQuery):
    active_users = await db_requests.get_all_users()
    message_text = ''

    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')

    for id, user in enumerate(active_users):
        message_text += f'{id + 1}) {user.user_telegram_id}| {user.user_name} | {(datetime.datetime.strftime(datetime.datetime.strptime(user.connection_date, "%Y-%m-%d %H:%M:%S"), "%d.%m.%Y")) if user.connection_date else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"} | {datetime.datetime.strftime(datetime.datetime.strptime(user.shutdown_date, "%Y-%m-%d %H:%M:%S"), "%d.%m.%Y")}\n'

    MESS_MAX_LENGTH = 4096
    for x in range(0, len(message_text), MESS_MAX_LENGTH):
                mess = message_text[x: x + MESS_MAX_LENGTH]
                await callback.message.answer(mess)

    #await callback.message.edit_text(message_text[:4000], reply_markup=builder.as_markup())


@router.callback_query(F.data == "admin_send_message_to_all_users")
async def admin_send_message_to_all_users(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SendMessageToAllUsers.text)
    message_text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.'
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.message(StateFilter(SendMessageToAllUsers.text))
async def text_message_recieved(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='confirm_send_message_to_users')
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_from_')
    builder.adjust(1)
    await message.answer('–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç.\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –Ω–∞–∂–º–∏ "‚ùå –û—Ç–º–µ–Ω–∞"\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç')
    await message.answer(message.text, reply_markup=builder.as_markup())


@router.callback_query(F.data == 'confirm_send_message_to_users', StateFilter(SendMessageToAllUsers.text))
async def confirm_send_message_to_users(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state()
    await callback.message.delete()
    await callback.message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è')
    fsmdata = await state.get_data()
    message_text = fsmdata.get('message_text')
    message_text += '\n\n–ß—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.'
    clients = await db_requests.get_clients()
    total_sent = 0
    for client in clients:
        if not client.blocked_bot and client.notifications:
            try:
                builder = InlineKeyboardBuilder()
                if client.notifications:
                    builder.button(text='üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã', callback_data=f'change_notification_status_from_not_{client.id}')
                else:
                    builder.button(text='üîò –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã', callback_data=f'change_notification_status_from_not_{client.id}')
                await bot.send_message(client.user_telegram_id, message_text, reply_markup=builder.as_markup())
                total_sent += 1
            except:
                print(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id {client.user_telegram_id}, —Ö–æ—Ç—è –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ')
                await callback.message.answer(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id {client.user_telegram_id}, —Ö–æ—Ç—è –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')
            await asyncio.sleep(0.1)
    await callback.message.answer(f'–ó–∞–∫–æ–Ω—á–∏–ª. {total_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.')


@router.callback_query(RestoreShutdownDate.filter())
async def restore_shutdown_date(callback: types.CallbackQuery, callback_data: RestoreShutdownDate):
    await callback.message.edit_reply_markup(answer_markup='')
    user_telegram_id = callback_data.user_telegram_id
    shutdown_date = datetime.datetime.fromtimestamp(int(callback_data.date))
    payment_id = callback_data.payment_id
    client = Client(user_telegram_id)
    await db_requests.delete_payment(payment_id)
    await db_requests.restore_shutdown_date(user_telegram_id, shutdown_date)
    await callback.message.answer(f'–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞: {shutdown_date} (UTC+{client.timezone}).\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ —É–¥–∞–ª–µ–Ω–∞.\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏, —Å–¥–µ–ª–∞–π —ç—Ç–æ —è–≤–Ω–æ.')


'''@router.message(Command('test'))
async def test(message: types.Message):
    api_requests.delete_access_key(rdn5_id=3)'''


