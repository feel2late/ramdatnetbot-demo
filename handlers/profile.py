import asyncio
import datetime
import logging
import random
import time
import traceback
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command, CommandObject
from aiogram.filters import StateFilter, Text
from glQiwiApi import QiwiP2PClient
import config
import aioschedule
import db_requests
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot_init import bot
from modules.client import Client
import models
import api_requests
from aiogram.enums.content_type import ContentType
from aiogram import F, Router
from modules.states import ManualControl, ChatWithUser, SendMessageToAllUsers
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.chat_member_updated import \
    ChatMemberUpdatedFilter, MEMBER, KICKED
from modules.callbacks_factories import RestoreShutdownDate
import modules.check_servers_status as check_servers_status
import modules.control_v2ray as control_v2ray
from yookassa import Payment
from modules.uri_encode import uri_encode
from gifs_id import gifs_id
from middlewares.outer import CheckForUserBan, CheckForUserBanCallback


router = Router()


@router.message(Command('profile'))
@router.callback_query(Text('profile'))
async def profile(callback: types.CallbackQuery):
    if not hasattr(callback, 'message') and not db_requests.is_registered(callback.from_user.id):
        await callback.answer('–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ü§®\n\n'
                                 '–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n'
                                 '–û–Ω —Å–º–æ–∂–µ—Ç –µ—ë –Ω–∞–π—Ç–∏ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –≤ –º–µ–Ω—é –±–æ—Ç–∞.', reply_markup='')
        return
    client: models.Access = await db_requests.get_client(callback.from_user.id)
    message_text = (f'üîê –î–æ—Å—Ç—É–ø: {"—Ä–∞–∑—Ä–µ—à—ë–Ω ‚úÖ" if not client.blocked else "–∑–∞–ø—Ä–µ—â—ë–Ω ‚ùå"}\n\n'
                    f'üìÖ –î–æ—Å—Ç—É–ø –¥–æ: {datetime.datetime.strftime(datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=int(client.timezone)), "%H:%M %d.%m.%Y")} (UTC+{client.timezone})\n\n'
                    f'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {client.tariff} —Ä.\n\n'
                    f'{"‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂" if client.postpone_payment else ""}')
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data='payment_by_card')
    builder.button(text='‚è≥ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂', callback_data='postpone_payment')
    builder.button(text='üåé –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', callback_data='timezone')
    if client.notifications:
        builder.button(text='üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã', callback_data=f'change_notification_status_{client.id}')
    else:
        builder.button(text='üîò –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã', callback_data=f'change_notification_status_{client.id}')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='menu')
    builder.adjust(1)

    if hasattr(callback, 'message'):
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    else:
        await callback.answer(message_text, reply_markup=builder.as_markup())


@router.callback_query(Text('payment_by_card'))
async def payment_by_card(callback: types.CallbackQuery):
    client = Client(callback.from_user.id)
    month_to_discount = {'1': 0, '3': 10, '6': 20}
    decrease_amount_3_month = (month_to_discount['3'] / 100) * (client.tariff * int('3'))
    decrease_amount_6_month = (month_to_discount['6'] / 100) * (client.tariff * int('6'))
    amount_value_3_month = client.tariff * 3 - decrease_amount_3_month
    amount_value_6_month = client.tariff * 6 - decrease_amount_6_month
    message_text = ('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–ø–ª–∞—Ç—ã.\n\n'
                    '–ë–æ–ª—å—à–µ –ø–µ—Ä–∏–æ–¥ - –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞.\n\n'
                    f'<b>3 –º–µ—Å—è—Ü–∞</b> - {amount_value_3_month} —Ä. (-10%)\n'
                    f'<b>6 –º–µ—Å—è—Ü–µ–≤</b> - {amount_value_6_month} —Ä. (-20%)')
    builder = InlineKeyboardBuilder()
    builder.button(text='üôÇ 1 –º–µ—Å—è—Ü', callback_data='payment_by_card_1')
    builder.button(text='üòÄ 3 –º–µ—Å—è—Ü–∞', callback_data='payment_by_card_3')
    builder.button(text='ü§© 6 –º–µ—Å—è—Ü–µ–≤', callback_data='payment_by_card_6')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='profile')
    builder.adjust(1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('change_notification_status_from_not_'))
async def change_notification_status(callback: types.CallbackQuery):
    client_id = callback.data[36:]
    notification_status = await db_requests.change_notification_status(client_id)
    if not notification_status:
        await callback.answer('–í—ã–∫–ª—é—á–µ–Ω—ã –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø–ª–∞—Ç—ã.', show_alert=True)
    client = Client(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    if client.notifications:
        builder.button(text='üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã', callback_data=f'change_notification_status_from_not_{client.id}')
    else:
        builder.button(text='üîò –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã', callback_data=f'change_notification_status_from_not_{client.id}')
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('change_notification_status_'))
async def change_notification_status(callback: types.CallbackQuery):
    client_id = callback.data[27:]
    notification_status = await db_requests.change_notification_status(client_id)
    if not notification_status:
        await callback.answer('–í—ã–∫–ª—é—á–µ–Ω—ã –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø–ª–∞—Ç—ã.', show_alert=True)
    client = Client(callback.from_user.id)
    message_text = (f'üîê –î–æ—Å—Ç—É–ø: {"—Ä–∞–∑—Ä–µ—à—ë–Ω ‚úÖ" if not client.blocked else "–∑–∞–ø—Ä–µ—â—ë–Ω ‚ùå"}\n\n'
                    f'üìÖ –î–æ—Å—Ç—É–ø –¥–æ: {datetime.datetime.strftime(datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=int(client.timezone)), "%H:%M %d.%m.%Y")} (UTC+{client.timezone})\n\n'
                    f'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {client.tariff} —Ä.\n\n'
                    f'{"‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂" if client.postpone_payment else ""}')
    
    builder = InlineKeyboardBuilder()
    builder.button(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data='payment_by_card')
    builder.button(text='‚è≥ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂', callback_data='postpone_payment')
    builder.button(text='üåé –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', callback_data='timezone')
    if client.notifications:
        builder.button(text='üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã', callback_data=f'change_notification_status_{client.id}')
    else:
        builder.button(text='üîò –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã', callback_data=f'change_notification_status_{client.id}')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='menu')
    builder.adjust(1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(Text('postpone_payment'))
async def postpone_payment(callback: types.CallbackQuery):
    client = Client(callback.from_user.id)
    if client.postpone_payment:
        await callback.answer('üòï –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —É—Å–ª—É–≥—É "–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂".', show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data='activate_postponed_pay')
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    builder.adjust(1)
    message_text = ('–£—Å–ª—É–≥–∞ "–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂" –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ–±–∞–≤–∏—Ç 3 –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º.\n\n'
                    '–ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç–µ —ç—Ç–∏ –¥–Ω–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã.')
    
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(Text('activate_postponed_pay'))
async def activate_postponed_pay(callback: types.CallbackQuery):
    client = Client(callback.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')

    await client.unblock()
    postpone_payment_date = await db_requests.add_postpone_payment_days(client.user_telegram_id)

    message_text = (f'‚úÖ –£—Å–ª—É–≥–∞ "–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n'
                    f'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ {datetime.datetime.strftime(datetime.datetime.strptime(postpone_payment_date, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=int(client.timezone)), "%H:%M:%S %d.%m.%Y")} (UTC+{client.timezone})')

    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    await bot.send_message(config.admins[0], f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {client.user_name} <code>({client.user_telegram_id})</code> –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º.')


@router.message(Command('invite_link'))
@router.callback_query(Text('invite_link'))
async def invite_link(callback: types.CallbackQuery):
    if not hasattr(callback, 'message') and not db_requests.is_registered(callback.from_user.id):
        await callback.answer('–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ü§®\n\n'
                                 '–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n'
                                 '–û–Ω —Å–º–æ–∂–µ—Ç –µ—ë –Ω–∞–π—Ç–∏ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –≤ –º–µ–Ω—é –±–æ—Ç–∞.', reply_markup='')
        return
    client = Client(callback.from_user.id)
    invite_url = f'https://t.me/RAMDATNET_BOT?start={client.invite_code}'
    message_text = ('–í–∞—à–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π:\n'
                    f'{invite_url}\n\n'
                    '‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–µ—Ä–≤–∏—Å–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n\n'
                    '‚úÖ –í–∞—à –¥—Ä—É–≥, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—à–∏—Å—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –ø–æ–ª—É—á–∏—Ç –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É.\n'
                    '‚úÖ –í—ã - –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∫–æ–≥–¥–∞ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ –æ–ø–ª–∞—Ç–∏—Ç –¥–æ—Å—Ç—É–ø –∏ –ø–æ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ <b>–∫–∞–∂–¥—ã–π —Ä–∞–∑</b>, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n'
                    f'{"–í—ã –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ üòî" if client.number_of_invitees == 0 else f"ü•≥ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {client.number_of_invitees} –¥—Ä—É–∑–µ–π!" }')

    builder = InlineKeyboardBuilder()
    builder.button(text='‚§¥Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É', url=f'https://t.me/share/url?url={invite_url}')
    #builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='menu')
    builder.adjust(1)

    if hasattr(callback, 'message'):
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    else:
        await callback.answer(message_text, reply_markup=builder.as_markup())


@router.callback_query(Text('timezone'))
async def timezone(callback: types.CallbackQuery):
    client = Client(callback.from_user.id)

    message_text = (f'‚ö†Ô∏è –î–ª—è –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+{client.timezone}\n\n'
                    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–≤—Ä–µ–º—è, –∞ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –±–µ–∑ –∑–≤—É–∫–∞.\n\n'
                    '–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π.')
    
    builder = InlineKeyboardBuilder()
    builder.button(text='UTC+2', callback_data=f'set_timezone_2')
    builder.button(text='UTC+3', callback_data=f'set_timezone_3')
    builder.button(text='UTC+4', callback_data=f'set_timezone_4')
    builder.button(text='UTC+5', callback_data=f'set_timezone_5')
    builder.button(text='UTC+6', callback_data=f'set_timezone_6')
    builder.button(text='UTC+7', callback_data=f'set_timezone_7')
    builder.button(text='UTC+8', callback_data=f'set_timezone_8')
    builder.button(text='UTC+9', callback_data=f'set_timezone_9')
    builder.button(text='UTC+10', callback_data=f'set_timezone_10')
    builder.button(text='UTC+11', callback_data=f'set_timezone_11')
    builder.button(text='UTC+12', callback_data=f'set_timezone_12')
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    builder.adjust(3, 3, 3, 2, 1)
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(Text(contains='set_timezone_'))
async def set_timezone(callback: types.CallbackQuery):
    timezone = int(callback.data[13:])
    await db_requests.set_timezone(callback.from_user.id, timezone)

    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    await callback.message.edit_text(f'‚úÖ –î–ª—è –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+{timezone}\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.', reply_markup=builder.as_markup())
