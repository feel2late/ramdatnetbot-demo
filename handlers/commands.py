import asyncio
import datetime
import traceback
from aiogram import types
from aiogram.filters.command import Command, CommandObject
from aiogram.filters import StateFilter
import config
import db_requests
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot_init import bot
from modules.client import Client
import models
from aiogram import F, Router
from modules.states import ChatWithUser
from aiogram.fsm.context import FSMContext
from aiogram.filters.chat_member_updated import MEMBER, KICKED
from modules.callbacks_factories import RestoreShutdownDate


router = Router()


@router.message(Command('my_id'))
async def get_chat_id(message: types.Message):
    await message.answer(f'You telegram id: {message.from_user.id}')


@router.message(Command('check_who_banned_bot'))
async def test(message: types.Message):
    if message.from_user.id not in config.admins:
        return
    blocked = 0
    not_blocked = 0
    
    users = await db_requests.get_all_users()
    await message.answer(f'–ü—Ä–æ–≤–µ—Ä—è—é, –∫—Ç–æ –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞...\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {len(users) / 10} —Å–µ–∫—É–Ω–¥.')

    for user in users:
        await asyncio.sleep(0.1)
        try:
            await bot.send_chat_action(user.user_telegram_id, 'typing')
            await db_requests.update_flag_blocked_bot(user.user_telegram_id, False)
            not_blocked += 1
        except:
            await db_requests.update_flag_blocked_bot(user.user_telegram_id, True)
            blocked += 1

    await message.answer(f'–ó–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n–ò—Ç–æ–≥–æ:\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ: {blocked}\n–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ: {not_blocked}')


@router.message(Command("aavoevodin"))
async def answer_to_client(message: types.Message, command: CommandObject):
    if not db_requests.is_registered(message.from_user.id):
        await message.answer('–ù–∞–¥–æ –±—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.')
    else:
        client = Client(message.from_user.id)
        new_shutdown_date = await db_requests.add_days(client.user_telegram_id)
        
        payment_id = await db_requests.add_payment(client.user_telegram_id, client.tariff, 'voevodin')
        
        await bot.send_animation(message.from_user.id, animation='CgACAgQAAxkBAAKNR2T3VJ6efs_pNWYPNs00IFTNcxKrAAL6mwACIR5kBzwyVWBqHgUVMAQ')
        await message.answer(('–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤–æ–ª—à–µ–±–Ω—É—é –∫–æ–º–∞–Ω–¥—É, —è –¥–æ–±–∞–≤–∏–ª –≤–∞–º –º–µ—Å—è—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n'
                              f'–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: –¥–æ {datetime.datetime.strftime(datetime.datetime.strptime(new_shutdown_date, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=int(client.timezone)), "%H:%M %d.%m.%Y")} (UTC+{client.timezone})\n\n'))
        builder = InlineKeyboardBuilder()
        builder.button(text='–û—Ç–∫–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', callback_data=RestoreShutdownDate(user_telegram_id=client.user_telegram_id, date=int(datetime.datetime.timestamp(datetime.datetime.strptime(client.shutdown_date, "%Y-%m-%d %H:%M:%S"))), payment_id=payment_id))
        await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {message.from_user.id} ({message.from_user.username} / {message.from_user.full_name}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤–æ–ª—à–µ–±–Ω—É—é –∫–æ–º–∞–Ω–¥—É "aavoevodin"', reply_markup=builder.as_markup())
        

@router.message(Command("a"))
async def answer_to_client(message: types.Message, command: CommandObject):
    admin_message: str = command.args

    try:
        recipient_telegram_id = message.reply_to_message.forward_from.id
        await bot.send_message(recipient_telegram_id, admin_message)
    except:
        await message.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await message.reply(traceback.format_exc())
        return


@router.message(Command("user_id"))
async def get_user_id_from_forward_message(message: types.Message, command: CommandObject):
    try:
        recipient_telegram_id = message.reply_to_message.forward_from.id
        await message.answer(recipient_telegram_id)
    except:
        await message.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç—å id')
        await message.reply(traceback.format_exc())
        return


@router.message(Command("ban_user"))
async def answer_to_client(message: types.Message, command: CommandObject):
    admin_message: int = command.args

    if admin_message and admin_message.isnumeric():
        client: models.Access = await db_requests.get_client(admin_message)
        unban_user = await db_requests.ban_client(admin_message, client.user_name)
        if unban_user:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_message} –∑–∞–±–∞–Ω–µ–Ω')
        else:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_message} —É–∂–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω')
        return

    try:
        user_telegram_id = message.reply_to_message.forward_from.id
        user_name = message.reply_to_message.forward_from.full_name
        ban_user = await db_requests.ban_client(user_telegram_id, user_name)
        if ban_user:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} / {user_telegram_id} –∑–∞–±–∞–Ω–µ–Ω')
        else:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} / {user_telegram_id} —É–∂–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω')
    except:
        await message.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await message.reply(traceback.format_exc())
        

@router.message(Command("unban_user"))
async def answer_to_client(message: types.Message, command: CommandObject):
    admin_message: int = command.args

    if admin_message and admin_message.isnumeric():
        unban_user = await db_requests.unban_client(admin_message)
        if unban_user:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_message} —Ä–∞–∑–±–∞–Ω–µ–Ω')
        else:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_message} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö')
        return
    
    try:
        user_telegram_id = message.reply_to_message.forward_from.id
        unban_user = await db_requests.unban_client(user_telegram_id)
        if unban_user:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} —Ä–∞–∑–±–∞–Ω–µ–Ω')
        else:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö')
    except:
        await message.reply('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await message.reply(traceback.format_exc())


@router.message(Command("start_chat"))
async def answer_to_client(message: types.Message, command: CommandObject, state: FSMContext):
    user_telegram_id: int = command.args
    if message.from_user.id in config.admins:
        await state.set_state(ChatWithUser.active_chat)
        await state.update_data(user_telegram_id=user_telegram_id)
        await message.answer('–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞—á–∞—Ç. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /stop_chat')


@router.message(Command("stop_chat"), StateFilter(ChatWithUser.active_chat))
async def stop_chat_with_user(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–∫—Ä—ã—Ç')


@router.message(StateFilter(ChatWithUser.active_chat))
async def active_chat(message: types.Message, state: FSMContext):
    message_for_user = message.text
    fsmdata = await state.get_data()
    user_telegram_id = fsmdata.get('user_telegram_id')
    try:
        await bot.send_message(user_telegram_id, message_for_user)
    except:
        await message.answer('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')


@router.message()
async def anyone_message(message: types.Message):
    if message.from_user.id in config.admins:
        if message.reply_to_message:
            try:
                recipient_telegram_id = message.reply_to_message.forward_from.id
                await bot.send_message(recipient_telegram_id, message.text)
            except:
                await bot.send_message(1342357584, f'–ö–ª–∏–µ–Ω—Ç —Å–∫—Ä—ã–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –µ–º—É —Å —Ç–µ–∫—Å—Ç–∞ <code>/send_message</code> user_telegram_id <u>–≤–∞—à —Ç–µ–∫—Å—Ç</u>')
    else:
        registered = db_requests.is_registered(message.from_user.id)
        if registered:
            client = Client(message.from_user.id)
            if not client.chat_with_admin:
                builder = InlineKeyboardBuilder()
                builder.button(text='üÜò –ü–æ–º–æ—â—å', callback_data='help')
                await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å 09:00 –¥–æ 18:00 –ú–°–ö (UTC+3).\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n\n'
                                    '<b>–ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–º–æ—â—å?</b>', reply_markup=builder.as_markup())
                await db_requests.set_status_chat_with_admin(message.from_user.id, True)
                await bot.send_message(376131047, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å /view_user_{client.user_telegram_id} –Ω–∞–ø–∏—Å–∞–ª:')

        else:
            await message.answer('‚õîÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–µ—Ä–≤–∏—Å–µ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º.\n\n'
                                        '–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n'
                                        '–û–Ω —Å–º–æ–∂–µ—Ç –µ—ë –Ω–∞–π—Ç–∏ –≤ –º–µ–Ω—é –±–æ—Ç–∞.')
            await bot.send_message(376131047, '–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª.')

        await bot.forward_message(376131047, message.chat.id, message.message_id)