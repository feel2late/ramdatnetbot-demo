from aiogram import types
from aiogram.filters.command import Command
from aiogram.filters import  Text
import config
import db_requests
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot_init import bot
from modules.client import Client
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters.chat_member_updated import MEMBER, KICKED

router = Router()


@router.message(Command('get_key'))
@router.callback_query(Text('keys_and_configs'))
async def keys_and_configs(callback: types.CallbackQuery):
    if not hasattr(callback, 'message') and not db_requests.is_registered(callback.from_user.id):
        await callback.answer('–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ü§®\n\n'
                                 '–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n'
                                 '–û–Ω —Å–º–æ–∂–µ—Ç –µ—ë –Ω–∞–π—Ç–∏ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –≤ –º–µ–Ω—é –±–æ—Ç–∞.', reply_markup='')
        return
    builder = InlineKeyboardBuilder()
    builder.button(text='Outline', callback_data='outline')
    builder.button(text='FoXray/v2rayNG', callback_data='xray')
    #builder.button(text='‚ùì–ö–∞–∫–æ–π –≤—ã–±—Ä–∞—Ç—å?', callback_data='which_to_choose')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='menu')
    builder.adjust(1)
    message_text = ('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –¥–≤—É–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º):\n\n'
                    '<b>Outline</b> - –ü—Ä–æ—Ç–æ–∫–æ–ª Shadowsocks - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–µ–º, –±—ã—Å—Ç—Ä—ã–π, –Ω–æ –ª–µ–≥–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤–ª–∞—Å—Ç—è–º–∏ –∏ –µ—Å—Ç—å —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n\n'
                    '<b>FoXray/v2rayNG</b> - –ü—Ä–æ—Ç–æ–∫–æ–ª XTLS-Reality - —Å–∞–º–∞—è –ø–µ—Ä–µ–¥–æ–≤–∞—è –∏ –Ω–µ–¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫. –í–ª–∞—Å—Ç–∏ –Ω–µ —É–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.')
    if hasattr(callback, 'message'):
        await callback.message.edit_text(message_text, reply_markup=builder.as_markup())
    else:
        await callback.answer(message_text, reply_markup=builder.as_markup())



@router.callback_query(Text('xray'))
async def xray(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text='üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è', callback_data='get_xray_key_fin')
    builder.button(text='üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', callback_data='get_xray_key_ned')
    #builder.button(text='üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data='get_xray_key_rus')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='keys_and_configs')
    builder.adjust(1)

    message_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É XTLS-Reality.\n\n'
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('get_xray_key_'))
async def get_outline_key(callback: types.CallbackQuery):
    country = callback.data[13:]
    builder = InlineKeyboardBuilder()
    builder.button(text='üì≤ –°–∫–∞—á–∞—Ç—å FoXray –∏–ª–∏ v2rayNG', callback_data='get_xray_app')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='xray')
    builder.adjust(1)
    client = Client(callback.from_user.id)
    
    if country == 'fin':
        if not client.v2ray4_key:
            create_status = await client.create_v2ray_key(server='rdn-fin')
            if create_status not in [200, 409]:
                message_text = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                await bot.send_message(config.admins[0], '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ xray –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –§–∏–Ω–ª—è–Ω–¥–∏—è.')
            else:
                message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FoXray (iOS) –∏–ª–∏ v2rayNG (Android).\n\n'
                                f'<code>vless://{client.v2ray4_key}@rdn-fin.ramdatnet.space:443?flow=xtls-rprx-vision&type=tcp&security=reality&fp=chrome&sni=www.samsung.com&pbk=clSf7bklBmz6IictrfRrQ8jbfXsvhnp40mjbMkklXyI&sid=80f4edbab1b18af3#RAMDATNET! üá´üáÆ Finland</code>')
        else:
            message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FoXray (iOS) –∏–ª–∏ v2rayNG (Android).\n\n'
                            f'<code>vless://{client.v2ray4_key}@rdn-fin.ramdatnet.space:443?flow=xtls-rprx-vision&type=tcp&security=reality&fp=chrome&sni=www.samsung.com&pbk=clSf7bklBmz6IictrfRrQ8jbfXsvhnp40mjbMkklXyI&sid=80f4edbab1b18af3#RAMDATNET! üá´üáÆ Finland</code>')
    elif country == 'ned':
        if not client.v2ray1_key:
            create_status = await client.create_v2ray_key(server='rdn-ned')
            if create_status not in [200, 409]:
                message_text = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                await bot.send_message(config.admins[0], '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ xray –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã.')
            else:
                message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n'
                            f'<code>vless://{client.v2ray1_key}@rdn-ned.ramdatnet.space:443?flow=xtls-rprx-vision&type=tcp&security=reality&fp=chrome&sni=www.samsung.com&pbk=8WlCXDUo5g787g8nJCt_FcAeaFDY0FWB4AnVO_4FhCI&sid=b3af36d97da93973#RAMDATNET! üá≥üá± Nederland</code>')
        else:
            message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n'
                            f'<code>vless://{client.v2ray1_key}@rdn-ned.ramdatnet.space:443?flow=xtls-rprx-vision&type=tcp&security=reality&fp=chrome&sni=www.samsung.com&pbk=8WlCXDUo5g787g8nJCt_FcAeaFDY0FWB4AnVO_4FhCI&sid=b3af36d97da93973#RAMDATNET! üá≥üá± Nederland</code>')
    elif country == 'rus':
        message_text = (f'–õ–æ–∫–∞—Ü–∏—è "üá∑üá∫ –†–æ—Å—Å–∏—è" –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Shadowsocks.\n\n')
        builder = InlineKeyboardBuilder()
        builder.button(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Shadowsocks', callback_data='get_outline_key_rus')
        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='xray')
        builder.adjust(1)

    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(Text('xray_instruction'))
async def xray(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    bot_message = fsmdata.get('bot_message')
    await bot_message.edit_reply_markup(answer_markup='')
    builder = InlineKeyboardBuilder()
    builder.button(text='üçè IOS', callback_data='xray_instruction_iphone')
    builder.button(text='ü§ñ Android', callback_data='xray_instruction_android')
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ XTLS-Reality', callback_data='xray')
    builder.adjust(1)
    bot_message = await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.', reply_markup=builder.as_markup())
    await state.update_data(bot_message=bot_message)


@router.callback_query(Text('xray_instruction_iphone'))
async def xray_instruction(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    bot_message = fsmdata.get('bot_message')
    await bot_message.delete()
    message_text = ('–°–µ–π—á–∞—Å —Å–≤–µ—Ä—Ö—É –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n'
                    '1) –°—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å (vless://).\n\n'
                    '2) –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫—É–¥–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤—Å—Ç–∞–≤–∏—Ç—å –∏ –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.\n\n')
    builder = InlineKeyboardBuilder()
    builder.button(text='–°–∫–∞—á–∞—Ç—å FoXray –¥–ª—è IOS', url='https://apps.apple.com/us/app/foxray/id6448898396')
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ XTLS-Reality', callback_data='xray')
    builder.adjust(1)
    photos = [
        types.InputMediaPhoto(media='AgACAgIAAxkBAAJ_NWTTsd7oSKAkPE3nkpThltnm6ua6AAIu0jEbYqiZSh15E9J-WF-0AQADAgADeQADMAQ', caption='–®–∞–≥ 1'),
        types.InputMediaPhoto(media='AgACAgIAAxkBAAJ_OGTTsgcxtJCUbKh7-RWVurqntIHcAAIx0jEbYqiZSltdcXTOc-faAQADAgADeQADMAQ', caption='–®–∞–≥ 2')
    ]
    await bot.send_media_group(chat_id=callback.from_user.id, media=photos)
    await callback.message.answer(message_text, reply_markup=builder.as_markup())
    

@router.callback_query(Text('xray_instruction_android'))
async def xray_instruction(callback: types.CallbackQuery, state: FSMContext):
    fsmdata = await state.get_data()
    bot_message = fsmdata.get('bot_message')
    await bot_message.delete()
    
    message_text = ('–°–µ–π—á–∞—Å —Å–≤–µ—Ä—Ö—É –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n'
                    '1) –°—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å (vless://).\n\n'
                    '2) –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫—É–¥–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤—Å—Ç–∞–≤–∏—Ç—å –∏ –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.\n\n')
    builder = InlineKeyboardBuilder()
    builder.button(text='–°–∫–∞—á–∞—Ç—å v2rayNG –¥–ª—è Android', url='https://play.google.com/store/apps/details?id=com.v2ray.ang&hl=ru&gl=US')
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ XTLS-Reality', callback_data='xray')
    builder.adjust(1)
    photos = [
        types.InputMediaPhoto(media='AgACAgIAAxkBAAJ_O2TTsg8Ze7qnT1qgL1IUW3jvpZKAAAIy0jEbYqiZShopBqHkKupUAQADAgADeQADMAQ', caption='–®–∞–≥ 1'),
        types.InputMediaPhoto(media='AgACAgIAAxkBAAJ_PmTTshMobyOFMZVVow3qwTyHMpTMAAIz0jEbYqiZSnmYhqqbmWH1AQADAgADeQADMAQ', caption='–®–∞–≥ 2'),
        types.InputMediaPhoto(media='AgACAgIAAxkBAAJ_QWTTshYtjaMWF64bfgjcK46MwRVlAAI00jEbYqiZSqm_R089PGkRAQADAgADeQADMAQ', caption='–®–∞–≥ 3')
    ]
    await bot.send_media_group(chat_id=callback.from_user.id, media=photos)
    await callback.message.answer(message_text, reply_markup=builder.as_markup())


@router.callback_query(Text('which_to_choose'))
async def which_to_choose(callback: types.CallbackQuery):
    message_text = ''
    builder = InlineKeyboardBuilder()
    builder.button(text='üîô –ù–∞–∑–∞–¥ –≤ –∫–ª—é—á–∏ –∏ –∫–æ–Ω—Ñ–∏–≥–∏', callback_data='keys_and_configs')
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(Text('outline'))
async def outline(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    #builder.button(text='üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á', callback_data='get_outline_key')
    #builder.button(text='üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', callback_data='get_outline_app')
    builder.button(text='üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è', callback_data='get_outline_key_fin')
    builder.button(text='üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', callback_data='get_outline_key_ned')
    builder.button(text='üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data='get_outline_key_rus')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='keys_and_configs')
    builder.adjust(1)
    message_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Shadowsocks.\n\n'
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('get_outline_key_'))
async def get_outline_key(callback: types.CallbackQuery):
    country = callback.data[16:]
    builder = InlineKeyboardBuilder()
    builder.button(text='üì≤ –°–∫–∞—á–∞—Ç—å Outline', callback_data='get_outline_app')
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data='outline')
    builder.adjust(1)
    client = Client(callback.from_user.id)
    
    if country == 'fin':
        if not client.rdn4:
            create_status = client.create_outline_rdn4_key()
            if not create_status:
                message_text = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                await bot.send_message(config.admins[0], '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Shadowsocks –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –§–∏–Ω–ª—è–Ω–¥–∏—è.')
            else:
                message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n'
                                f'<code>{client.rdn4}#üá´üáÆ Finland</code>')
        else:
            message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n'
                            f'<code>{client.rdn4}#üá´üáÆ Finland</code>')
    elif country == 'ned':
        if not client.rdn2:
            create_status = client.create_outline_rdn2_key()
            if not create_status:
                message_text = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                await bot.send_message(config.admins[0], '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Shadowsocks –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã.')
            else:
                message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n'
                            f'<code>{client.rdn2}#üá≥üá± Nederland</code>')
        else:
            message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n'
                            f'<code>{client.rdn2}#üá≥üá± Nederland</code>')
    elif country == 'rus':
        if not client.rdn5:
            create_status = client.create_outline_rdn5_key()
            if not create_status:
                message_text = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                await bot.send_message(config.admins[0], '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Shadowsocks –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –†–æ—Å—Å–∏—è.')
            else:
                message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n'
                            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å–µ—Ä–≤–∏—Å–∞–º (–±–∞–Ω–∫–∞–º, –≥–æ—Å—É—Å–ª—É–≥–∞–º) –µ—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π.\n\n'
                            f'<code>{client.rdn5}#üá∑üá∫ Russia</code>')
        else:
            message_text = (f'–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á <i>(–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–≥–æ)</i> –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.\n\n'
                            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å–µ—Ä–≤–∏—Å–∞–º (–±–∞–Ω–∫–∞–º, –≥–æ—Å—É—Å–ª—É–≥–∞–º) –µ—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π.\n\n'
                            f'<code>{client.rdn5}#üá∑üá∫ Russia</code>')

    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())


